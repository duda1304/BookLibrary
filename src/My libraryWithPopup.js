import React from 'react';
import addIcon from './Add-icon.png'
import Webcam from "react-webcam";
import PhotoCameraOutlinedIcon from '@material-ui/icons/PhotoCameraOutlined';import './Style.css';
import Popover from '@material-ui/core/Popover';
import { makeStyles } from '@material-ui/core/styles';

class TakeShot extends React.Component {
    state = {
        imageData: null,
        imageName: "",
        saveImage: false
    }
    setRef = webcam => {
        this.webcam = webcam;
      };
    capture = () => {
    const imageSrc = this.webcam.getScreenshot();
    this.setState(
        {
            imageData: imageSrc
        }
    )
    };
    onClickRetake = (e) => {
        e.persist();
        this.setState({
            imageData: null
        })
    }
    onClickSave = (e) => {
        e.persist();
        this.setState((previousState) => {
            return {
                saveImage: !previousState.saveImage
            }
        });
    }
    handleChange = (e) => {
        e.persist();
        this.setState({
            [e.target.name]: e.target.value
        })
    }
    handleSaveSubmit = (e) => {
        e.preventDefault();
        let imageObject = {
            image_name: this.state.imageName,
            job_id: this.props.job.id,
            image_data: this.state.imageData
            
        }
        var fs = require('fs');
// string generated by canvas.toDataURL()
var img = this.state.imageData;
// strip off the data: url prefix to get just the base64-encoded bytes
var data = img.replace(/^data:image\/\w+;base64,/, "");
var buf = new Buffer(data, 'base64');
fs.writeFile('image.png', buf);
        this.props.saveJobImage(imageObject);
    }
    saveForm = () => {
        return(
            <div>
                <form onSubmit={this.handleSaveSubmit}>
                    {/* <p>
                        <label>Image name:</label>
                        <input type="text"
                        name= "image_name"
                        value={this.state.imageName}></input>
                        <input type="submit" value="save"></input>
                    </p> */}
                </form>
            </div>
        )
    }
    render(){

        const videoConstraints = {
            // width: 1280,
            // height: 720,
            facingMode: "user",
        };
        
        return(
            <div className="main">
            <Webcam 
                // style={this.props.visibility}
                audio={false}
                // height={350}
                width="100%"
                height="fit-content"
                ref={this.setRef}
                screenshotFormat="image/jpeg"
                // width={350}
                videoConstraints={videoConstraints}
            />
            <PhotoCameraOutlinedIcon className="menu-icon" onClick={this.capture} />
            {this.state.imageData ?
                <div>
                    <p><img src={this.state.imageData} alt=""></img></p>
                    <span><button onClick={this.onClickRetake}>Retake?</button></span>
                    <span><button onClick={this.onClickSave}>Save</button></span>
                    {this.state.saveImage ? this.saveForm() : null}
                </div>    
            : null}
            </div>

        ); 
    }
}


class MyLibrary extends React.Component {
    // constructor(props) {
    //     super(props);
    
    //     this.state = {
    //       display : "none"
    //     }
    //     this.ShowVideo = this.ShowVideo.bind(this);
    //   }
    // ShowVideo() {
    //     this.setState(state => {
    //         if(state.display === "none") {
    //             return {display : "block"}
    //         } else {
    //             return {display : "none"}
    //         }
            
    //     })
    // }
    
    render(){
        // const root = document.getElementById("root");

        // if (this.state.display === "none") {
            return(    
                <div className="main">  
                    <div className="main-header">
                        <div>
                            <h2>MY LIBRARY</h2>
                            <p>Add books to library</p>
                        </div>
                        <div>
                            {/* <img src={addIcon} onClick={this.ShowVideo} className="menu-icon" alt="add"></img> */}
                           <SimplePopover /> 
                        </div>
                    </div>      
                </div>
            )
    //     } else {
    //         return(  
    //         <div className="main">  
    //         <Popover  
    //         anchorEl={root}
    //         // anchorOrigin={{
    //         //     vertical: 'center',
    //         //     horizontal: 'center',
    //         //   }}
    //         //   transformOrigin={{
    //         //     vertical: 'center',
    //         //     horizontal: 'center',
    //         //   }}
    //         // children={<TakeShot />}
    //         >
    //            <TakeShot />
    //         </Popover>
    //         </div>
    //         )
    //     }
    }
}

// class CreateImages < ActiveRecord: :Migration[5.2]
//   def change
//     create_table: images do |t|
//       t.string :image_name,
//       t.binary: image_data limit: 2,megabytes
//       t.integer: job_id

//       t.timestamps
//       end
//       end
//       end
// >

// const useStyles = ({
//     root: {
//       background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',
//       borderRadius: 3,
//       border: 0,
//       color: 'white',
//       height: 48,
//       padding: '0 30px',
//       boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',
//     },
//     label: {
//       textTransform: 'capitalize',
//     },
//   });

function SimplePopover() {
    const [anchorEl, setAnchorEl] = React.useState(null);
  
    const handleClick = () => {
      setAnchorEl(document.getElementById("modal-root"));
      document.getElementById('app-root').style.filter = 'blur(5px)'
    };
    const handleClose = () => {
      setAnchorEl(null);
    };
    const open = Boolean(anchorEl);
    const id = open ? 'simple-popover' : undefined;

    // const classes = useStyles;
    const useStyles = makeStyles({
        root: { 
            height: "100vh"
         },
        label: { /* … */ },
        outlined: {
          /* … */
          '&$disabled': { /* … */ },
        },
        outlinedPrimary: {
          /* … */
          '&:hover': { /* … */ },
        },
        disabled: {},
      }, { name: 'MuiPopover' });

    return (
      <div>
        <img src={addIcon} onClick={handleClick} className="menu-icon" alt="add"></img>
        <Popover
          id={id}
        //   classes={{
        //     root: classes.root, // class name, e.g. `classes-nesting-root-x`
        //     label: classes.label, // class name, e.g. `classes-nesting-label-x`
        //   }}
        //   width={500}
        classes={useStyles}
          
          open={open}
          anchorEl={anchorEl}
          onClose={handleClose}
          anchorOrigin={{
            vertical: 'center',
            horizontal: 'center',
          }}
          transformOrigin={{
            vertical: 'center',
            horizontal: 'center',
          }}
        >
          <TakeShot />
        </Popover>
      </div>
    );
  }

export default MyLibrary;


